# GitHub Actions Workflow for Deploying to GitHub Pages
# This workflow automatically builds and deploys the personal portfolio site
# to GitHub Pages whenever changes are pushed to the main branch.
name: Deploy to GitHub Pages

# Workflow Triggers:
# - push: Automatically runs when code is pushed to the main branch
# - workflow_dispatch: Allows manual triggering from the Actions tab
on:
  push:
    branches: [main]
  workflow_dispatch:

# Permissions required for GitHub Pages deployment:
# - contents: read - Allows reading repository contents
# - pages: write - Allows writing to GitHub Pages
# - id-token: write - Required for OIDC authentication with GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Concurrency control to prevent multiple deployments running simultaneously
# This ensures only one deployment runs at a time to avoid conflicts
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # BUILD JOB
  # This job installs dependencies, builds the project, and prepares artifacts for deployment
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository code
      # Uses actions/checkout@v4 to clone the repository into the runner
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      # Installs Node.js 20.x (LTS) which is required for building the Vite project
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      # Step 3: Cache npm dependencies
      # Caches node_modules to speed up subsequent builds
      # Cache key is based on package-lock.json hash to ensure cache invalidation on dependency changes
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      # Uses 'npm ci' instead of 'npm install' for faster, more reliable installs in CI environments
      # npm ci performs a clean install based on package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ./

      # Step 5: Build the project
      # Runs 'npm run build' which executes Vite build process
      # Generates optimized production files in the dist/ directory
      # Includes minification, code splitting, and asset optimization
      - name: Build
        run: npm run build
        working-directory: ./

      # Step 6: Upload build artifacts
      # Uploads the dist/ directory as a GitHub Pages artifact
      # This artifact will be used by the deploy job
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/

  # DEPLOY JOB
  # This job deploys the built artifacts to GitHub Pages
  # It only runs after the build job completes successfully
  deploy:
    needs: build # Wait for build job to complete
    runs-on: ubuntu-latest

    # Environment configuration for GitHub Pages
    # The URL will be available after deployment completes
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # Step 1: Deploy to GitHub Pages
      # Uses actions/deploy-pages@v4 to deploy the uploaded artifact
      # This action handles the deployment to GitHub Pages automatically
      # The deployment URL will be available in the workflow output
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
